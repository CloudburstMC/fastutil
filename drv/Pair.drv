/*
 * Copyright (C) 2020-2021 Sebastiano Vigna
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package PACKAGE;

/**  A type-specific {@link it.unimi.dsi.fastutil.Pair Pair}; provides some additional methods that use polymorphism to avoid (un)boxing. */

public interface PAIR KEY_VALUE_GENERIC extends it.unimi.dsi.fastutil.Pair<KEY_GENERIC_CLASS, VALUE_GENERIC_CLASS> {
#if KEYS_PRIMITIVE

	/**
	 * Returns the left element of this pair.
	 *
	 * @return the left element of this pair.
	 */
	public KEY_TYPE PAIR_LEFT();

	/** {@inheritDoc}
	 * @deprecated Please use the corresponding type-specific method instead.
	 */
	@SuppressWarnings("deprecation")
	@Deprecated
	@Override
	public default KEY_CLASS left() {
		return KEY2OBJ(PAIR_LEFT());
	}

	/**
	 * Sets the left element of this pair (optional operation).
	 *
	 * @param l a new value for the left element.
	 *
	 * @implSpec This implementation throws an {@link UnsupportedOperationException}.
	 */
	public default PAIR KEY_VALUE_GENERIC left(final KEY_TYPE l) {
		throw new UnsupportedOperationException();
	}

	/** {@inheritDoc}
	 * @deprecated Please use the corresponding type-specific method instead.
	 */
	@SuppressWarnings("deprecation")
	@Deprecated
	@Override
	public default PAIR KEY_VALUE_GENERIC left(final KEY_CLASS l) {
		return left(KEY_CLASS2TYPE(l));
	}

	/**
	 * Returns the left element of this pair.
	 *
	 * @return the left element of this pair.
	 *
	 * @implSpec This implementation delegates to {@link #left()}.
	 *
	 */
	public default KEY_TYPE PAIR_FIRST() {
		return PAIR_LEFT();
	}

	/** {@inheritDoc}
	 * @deprecated Please use the corresponding type-specific method instead.
	 */
	@SuppressWarnings("deprecation")
	@Deprecated
	@Override
	public default KEY_CLASS first() {
		return KEY2OBJ(PAIR_FIRST());
	}

	/**
	 * Sets the left element of this pair (optional operation).
	 *
	 * @param l a new value for the left element.
	 *
	 * @implSpec This implementation delegates to {@link #left(Object)}.
	 */
	public default PAIR KEY_VALUE_GENERIC first(final KEY_TYPE l) {
		return left(l);
	}

	/** {@inheritDoc}
	 * @deprecated Please use the corresponding type-specific method instead.
	 */
	@SuppressWarnings("deprecation")
	@Deprecated
	@Override
	public default PAIR KEY_VALUE_GENERIC first(final KEY_CLASS l) {
		return first(KEY_CLASS2TYPE(l));
	}

	/**
	 * Returns the left element of this pair.
	 *
	 * @return the left element of this pair.
	 *
	 * @implSpec This implementation delegates to {@link #left()}.
	 *
	 */
	public default KEY_TYPE PAIR_KEY() {
		return PAIR_FIRST();
	}

	/** {@inheritDoc}
	 * @deprecated Please use the corresponding type-specific method instead.
	 */
	@SuppressWarnings("deprecation")
	@Deprecated
	@Override
	public default KEY_CLASS key() {
		return KEY2OBJ(PAIR_KEY());
	}

	/**
	 * Sets the left element of this pair (optional operation).
	 *
	 * @param l a new value for the left element.
	 *
	 * @implSpec This implementation delegates to {@link #left(Object)}.
	 */
	public default PAIR KEY_VALUE_GENERIC key(final KEY_TYPE l) {
		return left(l);
	}

	@Override
	@Deprecated
	public default PAIR KEY_VALUE_GENERIC key(KEY_CLASS l) {
		return key(KEY_CLASS2TYPE(l));
	}

#endif

#if VALUES_PRIMITIVE

	/**
	 * Returns the right element of this pair.
	 *
	 * @return the right element of this pair.
	 */
	public VALUE_TYPE PAIR_RIGHT();

	/** {@inheritDoc}
	 * @deprecated Please use the corresponding type-specific method instead.
	 */
	@SuppressWarnings("deprecation")
	@Deprecated
	@Override
	public default VALUE_CLASS right() {
		return VALUE2OBJ(PAIR_RIGHT());
	}


	/**
	 * Sets the right element of this pair (optional operation).
	 *
	 * @param r a new value for the right element.
	 *
	 * @implSpec This implementation throws an {@link UnsupportedOperationException}.
	 */
	public default PAIR KEY_VALUE_GENERIC right(final VALUE_TYPE r) {
		throw new UnsupportedOperationException();
	}

	/** {@inheritDoc}
	 * @deprecated Please use the corresponding type-specific method instead.
	 */
	@SuppressWarnings("deprecation")
	@Deprecated
	@Override
	public default PAIR KEY_VALUE_GENERIC right(final VALUE_CLASS l) {
		return right(VALUE_CLASS2TYPE(l));
	}

	/**
	 * Returns the right element of this pair.
	 *
	 * @return the right element of this pair.
	 *
	 * @implSpec This implementation delegates to {@link #right()}.
	 *
	 */
	public default VALUE_TYPE PAIR_SECOND() {
		return PAIR_RIGHT();
	}

	/** {@inheritDoc}
	 * @deprecated Please use the corresponding type-specific method instead.
	 */
	@SuppressWarnings("deprecation")
	@Deprecated
	@Override
	public default VALUE_CLASS second() {
		return VALUE2OBJ(PAIR_SECOND());
	}

	/**
	 * Sets the right element of this pair (optional operation).
	 *
	 * @param r a new value for the right element.
	 *
	 * @implSpec This implementation delegates to {@link #right(Object)}.
	 */
	public default PAIR KEY_VALUE_GENERIC second(final VALUE_TYPE r) {
		return right(r);
	}

	/** {@inheritDoc}
	 * @deprecated Please use the corresponding type-specific method instead.
	 */
	@SuppressWarnings("deprecation")
	@Deprecated
	@Override
	public default PAIR KEY_VALUE_GENERIC second(final VALUE_CLASS l) {
		return second(VALUE_CLASS2TYPE(l));
	}

	/**
	 * Returns the right element of this pair.
	 *
	 * @return the right element of this pair.
	 *
	 * @implSpec This implementation delegates to {@link #right()}.
	 *
	 */
	public default VALUE_TYPE PAIR_VALUE() {
		return PAIR_RIGHT();
	}

	/** {@inheritDoc}
	 * @deprecated Please use the corresponding type-specific method instead.
	 */
	@SuppressWarnings("deprecation")
	@Deprecated
	@Override
	public default VALUE_CLASS value() {
		return VALUE2OBJ(PAIR_VALUE());
	}

	/**
	 * Sets the right element of this pair (optional operation).
	 *
	 * @param r a new value for the right element.
	 *
	 * @implSpec This implementation delegates to {@link #right(Object)}.
	 */
	public default PAIR KEY_VALUE_GENERIC value(final VALUE_TYPE r) {
		return right(r);
	}

	/** {@inheritDoc}
	 * @deprecated Please use the corresponding type-specific method instead.
	 */
	@SuppressWarnings("deprecation")
	@Deprecated
	@Override
	public default PAIR KEY_VALUE_GENERIC value(final VALUE_CLASS l) {
		return value(VALUE_CLASS2TYPE(l));
	}


#endif

	/** Returns a new type-specific immutable {@link it.unimi.dsi.fastutil.Pair Pair} with given left and right value. 
	 * @param left the left value.
	 * @param right the right value.
	 */
	public static KEY_VALUE_GENERIC PAIR KEY_VALUE_GENERIC of(final KEY_GENERIC_TYPE left, final VALUE_GENERIC_TYPE right) {
		return new IMMUTABLE_PAIR KEY_VALUE_GENERIC(left, right);
	}

#if ! KEYS_USE_REFERENCE_EQUALITY && ! VALUES_USE_REFERENCE_EQUALITY

	/**
	 * Returns a lexicographical comparator for pairs.
	 *
	 * <p>
	 * The comparator returned by this method implements lexicographical order. It compares first
	 * the left elements: if the result of the comparison is nonzero, it returns said result.
	 * Otherwise, this comparator returns the result of the comparison of the right elements.
	 *
	 * @return a lexicographical comparator for pairs.
	 */
	SUPPRESS_WARNINGS_KEY_VALUE_UNCHECKED
	public static KEY_VALUE_GENERIC java.util.Comparator<PAIR KEY_VALUE_GENERIC> lexComparator() {
		return (x, y) -> {
#if KEYS_PRIMITIVE
			final int t = KEY_CLASS.compare(x.PAIR_LEFT(), y.PAIR_LEFT());
#else
			final int t = ((Comparable KEY_GENERIC)x.PAIR_LEFT()).compareTo(y.PAIR_LEFT());
#endif
			if (t != 0) return t;
#if VALUES_PRIMITIVE
			return VALUE_CLASS.compare(x.PAIR_RIGHT(), y.PAIR_RIGHT());
#else
			return ((Comparable VALUE_GENERIC)x.PAIR_RIGHT()).compareTo(y.PAIR_RIGHT());
#endif
		};
	}

#endif

}
