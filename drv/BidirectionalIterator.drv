/*
 * Copyright (C) 2002-2021 Sebastiano Vigna
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package PACKAGE;

import it.unimi.dsi.fastutil.BidirectionalIterator;
#if KEYS_PRIMITIVE
import it.unimi.dsi.fastutil.objects.ObjectBidirectionalIterator;
#endif

/** A type-specific bidirectional iterator; provides an additional method to avoid (un)boxing,
 * and the possibility to skip elements backwards.
 *
 * @see BidirectionalIterator
 */

#if KEYS_PRIMITIVE
public interface KEY_BIDI_ITERATOR KEY_GENERIC extends KEY_ITERATOR KEY_GENERIC, ObjectBidirectionalIterator<KEY_GENERIC_CLASS> {
#else
public interface KEY_BIDI_ITERATOR KEY_GENERIC extends KEY_ITERATOR KEY_GENERIC, BidirectionalIterator<KEY_GENERIC_CLASS> {
#endif

#if KEYS_PRIMITIVE

	/**
	 * Returns the previous element as a primitive type.
	 *
	 * @return the previous element in the iteration.
	 * @see java.util.ListIterator#previous()
	 */

	KEY_TYPE PREV_KEY();

	/** {@inheritDoc}
	 * @deprecated Please use the corresponding type-specific method instead. */
	@Deprecated
	@Override
	default KEY_GENERIC_CLASS previous() { return KEY_CLASS.valueOf(PREV_KEY()); }

#endif

	/** Moves back for the given number of elements.
	 *
	 * <p>The effect of this call is exactly the same as that of
	 * calling {@link #previous()} for {@code n} times (possibly stopping
	 * if {@link #hasPrevious()} becomes false).
	 *
	 * @param n the number of elements to skip back.
	 * @return the number of elements actually skipped.
	 * @see #previous()
	 */
#if KEYS_PRIMITIVE
	@Override
#endif
	default int back(final int n) {
		int i = n;
		while(i-- != 0 && hasPrevious()) PREV_KEY();
		return n - i - 1;
	}

	/** {@inheritDoc} */
	@Override
	default int skip(final int n) {
		return KEY_ITERATOR.super.skip(n);
	}
}
