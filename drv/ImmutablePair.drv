/*
 * Copyright (C) 2020-2021 Sebastiano Vigna
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package PACKAGE;

/**  A type-specific immutable {@link it.unimi.dsi.fastutil.Pair Pair}; provides some additional methods that use polymorphism to avoid (un)boxing. */

public class IMMUTABLE_PAIR KEY_VALUE_GENERIC implements PAIR KEY_VALUE_GENERIC, java.io.Serializable {
	private static final long serialVersionUID = 0L;

	protected final KEY_GENERIC_TYPE left;
	protected final VALUE_GENERIC_TYPE right;

	/** Creates a new type-specific immutable {@link it.unimi.dsi.fastutil.Pair Pair} with given left and right value. 
	 * @param left the left value.
	 * @param right the right value.
	 */
	public IMMUTABLE_PAIR(final KEY_GENERIC_TYPE left, final VALUE_GENERIC_TYPE right) {
		this.left = left;
		this.right = right;
	}

	/** Returns a new type-specific immutable {@link it.unimi.dsi.fastutil.Pair Pair} with given left and right value. 
	 * @param left the left value.
	 * @param right the right value.
	 *
	 * @implSpec This factory method delegates to the constructor.
	 */
	public static KEY_VALUE_GENERIC IMMUTABLE_PAIR KEY_VALUE_GENERIC of(final KEY_GENERIC_TYPE left, final VALUE_GENERIC_TYPE right) {
		return new IMMUTABLE_PAIR KEY_VALUE_GENERIC(left, right);
	}

	@Override
	public KEY_GENERIC_TYPE PAIR_LEFT() {
		return left;
	}

	@Override
	public VALUE_GENERIC_TYPE PAIR_RIGHT() {
		return right;
	}
	
	@Override
	@SuppressWarnings("rawtypes")
	public boolean equals(Object other) {
		if (other == null) return false;

#if KEYS_PRIMITIVE || VALUES_PRIMITIVE
		if (other instanceof PAIR) {
			return

#if KEY_CLASS_Object
	java.util.Objects.equals(left, ((PAIR)other).PAIR_LEFT())
#else
	left == ((PAIR)other).PAIR_LEFT()
#endif
#if VALUE_CLASS_Object
	&& java.util.Objects.equals(right, ((PAIR)other).PAIR_RIGHT());
#else
	&& right == ((PAIR)other).PAIR_RIGHT();
#endif
		}
#endif

		if (other instanceof it.unimi.dsi.fastutil.Pair) {
			return
#if KEYS_USE_REFERENCE_EQUALITY
	left == ((it.unimi.dsi.fastutil.Pair)other).left()
#else
	java.util.Objects.equals(KEY2OBJ(left), ((it.unimi.dsi.fastutil.Pair)other).left())
#endif
#if VALUES_USE_REFERENCE_EQUALITY
	&& right == ((it.unimi.dsi.fastutil.Pair)other).right();
#else
	&& java.util.Objects.equals(VALUE2OBJ(right), ((it.unimi.dsi.fastutil.Pair)other).right());
#endif
		}

		return false;
	}

	@Override
    public int hashCode() {
		return KEY2JAVAHASH(left) * 19 + VALUE2JAVAHASH(right);
	}
                                
	/** Returns a string representation of this pair in the form &lt;<var>l</var>,<var>r</var>&gt;.
	 *
	 * @return a string representation of this pair in the form &lt;<var>l</var>,<var>r</var>&gt;.
	 */
	@Override
	public String toString() {
		return "<" + PAIR_LEFT() + "," + PAIR_RIGHT() + ">";
	}
}