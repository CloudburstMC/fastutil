/*
 * Copyright (C) 2020-2021 Sebastiano Vigna
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package PACKAGE;

/** An abstract class facilitating the creation of type-specific iterators.
 *
 * @apiNote Presently the class hosts
 * finalized versions of default delegating methods such as {@link #forEachRemaining}.
 */

public abstract class KEY_ABSTRACT_SPLITERATOR KEY_GENERIC implements KEY_SPLITERATOR KEY_GENERIC {
	protected KEY_ABSTRACT_SPLITERATOR() {}

#if KEYS_INT_LONG_DOUBLE
	/** {@inheritDoc} 
	 * @implSpec This method just delegates to the interface default method,
	 * as the default method, but it is final, so it cannot be overridden.
	 */
	@Override
	public final boolean tryAdvance(final KEY_CONSUMER action) {
		// Java won't let delegate to java.util.Spliterator.OfInt
		return tryAdvance((JDK_PRIMITIVE_KEY_CONSUMER) action);
	}

	/** {@inheritDoc} 
	 * @implSpec This method just delegates to the interface default method,
	 * as the default method, but it is final, so it cannot be overridden.
	 */
	@Override
	public final void forEachRemaining(final KEY_CONSUMER action) {
		forEachRemaining((JDK_PRIMITIVE_KEY_CONSUMER) action);
	}
#endif
}
